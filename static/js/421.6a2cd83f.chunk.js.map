{"version":3,"file":"static/js/421.6a2cd83f.chunk.js","mappings":"sKAEaA,EAAS,WAClB,OACI,SAAC,KAAD,CACIC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,MAAM,YACNC,UAAU,eACVC,aAAc,CAACC,eAAgB,SAAUC,OAAQ,QACjDC,aAAa,IAGxB,C,+HCZYC,E,OAAiBC,EAAAA,GAAH,6iB,SCoD3B,EA/CkB,WACd,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAcP,OAZAE,EAAAA,EAAAA,YAAU,WACNL,GAAW,IACXM,EAAAA,EAAAA,IAAaH,GACRI,MAAK,SAAAC,GACFR,GAAW,GACXF,EAAQU,EAAKX,KAChB,IACAY,OAAM,kBAAMP,GAAS,EAAf,IACNQ,SAAQ,kBAAMV,GAAW,EAAjB,GAEhB,GAAE,KAGC,4BACI,iCACED,IAAW,SAACf,EAAA,EAAD,IACXiB,IAAS,4DACRF,IAAYE,GAASJ,IAAQ,+BAC5B,SAACH,EAAD,UAEIG,EAAKc,KAAI,SAAAC,GAAI,OACb,2BACI,gBACIC,IACID,EAAI,aAAJ,0CACqCA,EAAI,c,89EAG7CE,IAAKF,EAAKG,QACd,4BACI,uCAAeH,EAAKI,cACpB,wBAAG,uBAAIJ,EAAKG,cAVXH,EAAKK,GADD,UAmBhC,C,sLCpDKC,EAAW,+BACXC,EAAU,mCAEHC,EAAS,mCAAG,WAAOC,GAAP,iFACRC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBG,EAAtB,oBAA4CF,IACzDZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IARgB,mFAAH,sDAWTC,EAAY,mCAAG,WAAO1B,GAAP,iFACXmB,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBf,EAAtB,oBAAyCgB,IAC1DZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IARuB,mFAAH,sDAWZtB,EAAY,mCAAG,WAAOH,GAAP,iFACXmB,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBf,EAAtB,4BAAiDgB,IAClEZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IARuB,mFAAH,sDAWZE,EAAe,mCAAG,WAAO3B,GAAP,iFACdmB,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBf,EAAtB,4BAAiDgB,IAClEZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IAR0B,mFAAH,sDAWfG,EAAiB,mCAAG,WAAOC,GAAP,iFACjBV,MAAM,GAAD,OAAIJ,EAAJ,+BAAmCc,EAAnC,gDAAgFb,IAChGZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IAR4B,mFAAH,qD","sources":["components/Loader/Loader.js","components/MovieCast/MovieCast.styled.js","components/MovieCast/MovieCast.js","services/getMoviesInfo.js"],"sourcesContent":["import { Oval } from \"react-loader-spinner\"\n\nexport const Loader = () => {\n    return (\n        <Oval\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            color=\"orangered\"\n            ariaLabel=\"oval-loading\"\n            wrapperStyle={{justifyContent: 'center', margin: '16px'}}\n            wrapperClass=\"\"\n        />\n    )\n}","import styled from \"@emotion/styled\";\n\nexport const CastListStyled = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 24px;\n    justify-content: center;\n    list-style: 'none';\n\n    & li {\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n        cursor: pointer;\n        width: 150px;\n        text-align: center;\n        box-shadow: 2px 5px 5px 2px rgba(0,0,0,0.3);\n\n        & div {\n            padding: 4px;\n            height: 100%;\n        }\n\n        &:hover {\n            box-shadow: 5px 10px 10px 5px rgba(0,0,0,0.3);\n        }\n    }\n`;","import { Loader } from \"components/Loader/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCast } from \"services/getMoviesInfo\";\nimport { CastListStyled } from \"./MovieCast.styled\";\nimport FileNotFound from '../../images/file-not-found.jpg';\n\nconst MovieCast = () => {\n    const [cast, setCast] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const {movieId} = useParams();\n\n    useEffect(() => {\n        setLoading(true);\n        getMovieCast(movieId)\n            .then(data => {\n                setLoading(false);\n                setCast(data.cast);\n            })\n            .catch(() => setError(true))\n            .finally(() => setLoading(false))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div>\n            <h3>Cast</h3>\n            { loading && <Loader /> }\n            { error && <div>Oops, something went wrong...</div> }\n            { !loading && !error && cast && <>\n                <CastListStyled>\n                {\n                    cast.map(item => (\n                    <li key={item.id}>\n                        <img \n                            src={\n                                item['profile_path'] \n                                ? `https://image.tmdb.org/t/p/w300/${item['profile_path']}` \n                                : FileNotFound\n                            } \n                            alt={item.name} />\n                        <div>\n                            <p>Character: {item.character}</p>\n                            <p><b>{item.name}</b></p>\n                        </div>\n                    </li>))\n                }\n            </CastListStyled>\n            </> }\n        </div>\n    )\n}\n\nexport default MovieCast;","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '376bdebe42e07e1ce735b7444b0a16bb';\n\nexport const getMovies = async (moviesType) => {\n    return await fetch(`${BASE_URL}/movie/${moviesType}?api_key=${API_KEY}`)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status, response.statusText);\n            }\n\n            return response.json();\n        })\n}\n\nexport const getMovieInfo = async (movieId) => {\n    return await fetch(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}\n\nexport const getMovieCast = async (movieId) => {\n    return await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}\n\nexport const getMovieReviews = async (movieId) => {\n    return await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}\n\nexport const getMoviesBySearch = async (query) => {\n   return await fetch(`${BASE_URL}/search/movie?query=${query}}&include_adult=false&page=1&api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}"],"names":["Loader","visible","height","width","color","ariaLabel","wrapperStyle","justifyContent","margin","wrapperClass","CastListStyled","styled","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","getMovieCast","then","data","catch","finally","map","item","src","alt","name","character","id","BASE_URL","API_KEY","getMovies","moviesType","fetch","response","ok","Error","status","statusText","json","getMovieInfo","getMovieReviews","getMoviesBySearch","query"],"sourceRoot":""}