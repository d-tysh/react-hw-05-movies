{"version":3,"file":"static/js/873.5e4c4904.chunk.js","mappings":"sKAEaA,EAAS,WAClB,OACI,SAAC,KAAD,CACIC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,MAAM,YACNC,UAAU,eACVC,aAAc,CAACC,eAAgB,SAAUC,OAAQ,QACjDC,aAAa,IAGxB,C,uFC2BD,UApCqB,WACjB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAcP,OAXAE,EAAAA,EAAAA,YAAU,WACNL,GAAW,IACXM,EAAAA,EAAAA,IAAgBH,GACXI,MAAK,SAAAC,GACFR,GAAW,GACXF,EAAWU,EAAKC,QACnB,IACAC,OAAM,kBAAMR,GAAS,EAAf,IACNS,SAAQ,kBAAMX,GAAW,EAAjB,GAChB,GAAE,CAACG,KAGA,4BACI,oCACCJ,IAAW,SAAC,IAAD,IACXE,IAAS,4DACRJ,EAAQe,SAAU,8DACjBb,IAAYE,GAASJ,IAAW,wBAE3BA,EAAQgB,KAAI,SAAAC,GAAM,OAAI,2BAClB,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFgBF,EAAOG,GAApB,QAQrC,C,sLCvCKC,EAAW,+BACXC,EAAU,mCAEHC,EAAS,mCAAG,WAAOC,GAAP,iFACRC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBG,EAAtB,oBAA4CF,IACzDZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IARgB,mFAAH,sDAWTC,EAAY,mCAAG,WAAO1B,GAAP,iFACXmB,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBf,EAAtB,oBAAyCgB,IAC1DZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IARuB,mFAAH,sDAWZE,EAAY,mCAAG,WAAO3B,GAAP,iFACXmB,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBf,EAAtB,4BAAiDgB,IAClEZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IARuB,mFAAH,sDAWZtB,EAAe,mCAAG,WAAOH,GAAP,iFACdmB,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBf,EAAtB,4BAAiDgB,IAClEZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IAR0B,mFAAH,sDAWfG,EAAiB,mCAAG,WAAOC,GAAP,iFACjBV,MAAM,GAAD,OAAIJ,EAAJ,+BAAmCc,EAAnC,gDAAgFb,IAChGZ,MAAK,SAAAgB,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,OAAQH,EAASI,YAG9C,OAAOJ,EAASK,MACnB,IAR4B,mFAAH,qD","sources":["components/Loader/Loader.js","components/MovieReviews/MovieReviews.js","services/getMoviesInfo.js"],"sourcesContent":["import { Oval } from \"react-loader-spinner\"\n\nexport const Loader = () => {\n    return (\n        <Oval\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            color=\"orangered\"\n            ariaLabel=\"oval-loading\"\n            wrapperStyle={{justifyContent: 'center', margin: '16px'}}\n            wrapperClass=\"\"\n        />\n    )\n}","import { Loader } from \"components/Loader/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"services/getMoviesInfo\";\n\nconst MovieReviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const {movieId} = useParams();\n\n\n    useEffect(() => {\n        setLoading(true);\n        getMovieReviews(movieId)\n            .then(data => {\n                setLoading(false);\n                setReviews(data.results)\n            })\n            .catch(() => setError(true))\n            .finally(() => setLoading(false));\n    }, [movieId])\n\n    return (\n        <div>\n            <h3>Rewiews</h3>\n            {loading && <Loader />}\n            {error && <div>Oops, something went wrong...</div>}\n            {!reviews.length && <p>Sorry, no reviews for this movie.</p>}\n            { !loading && !error && reviews && <ul>\n                {\n                    reviews.map(review => <li key={review.id}>\n                        <h4>Author: {review.author}</h4>\n                        <p>{review.content}</p>\n                    </li>)\n                }\n            </ul> }\n        </div>\n    )\n}\n\nexport default MovieReviews;","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '376bdebe42e07e1ce735b7444b0a16bb';\n\nexport const getMovies = async (moviesType) => {\n    return await fetch(`${BASE_URL}/movie/${moviesType}?api_key=${API_KEY}`)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status, response.statusText);\n            }\n\n            return response.json();\n        })\n}\n\nexport const getMovieInfo = async (movieId) => {\n    return await fetch(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}\n\nexport const getMovieCast = async (movieId) => {\n    return await fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}\n\nexport const getMovieReviews = async (movieId) => {\n    return await fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}\n\nexport const getMoviesBySearch = async (query) => {\n   return await fetch(`${BASE_URL}/search/movie?query=${query}}&include_adult=false&page=1&api_key=${API_KEY}`)\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status, response.statusText);\n        }\n\n        return response.json();\n    })\n}"],"names":["Loader","visible","height","width","color","ariaLabel","wrapperStyle","justifyContent","margin","wrapperClass","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","getMovieReviews","then","data","results","catch","finally","length","map","review","author","content","id","BASE_URL","API_KEY","getMovies","moviesType","fetch","response","ok","Error","status","statusText","json","getMovieInfo","getMovieCast","getMoviesBySearch","query"],"sourceRoot":""}